/*
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package cliseau.central.policy;

import cliseau.central.event.IcapEvent;

/**
 * This interface should be implemented by every class implementing a service
 * automaton that enforcing some policy on an Icap server in order to prevent
 * pay-for-less attacks against a TomatoCart webshop.
 * 
 * In the context of this interface a valid token is a token that has been
 * generated by the web shop but which has not been used to confirm the payment
 * of some client's order, yet. An invalid token is a not valid one.
 * 
 * @author Tobias Reinhard
 *
 */
public interface PayForLessAutomaton extends IcapServiceAutomaton {
	/**
	 * Checks if the given token is valid i.e., checks if this token has been
	 * established by the web shop but has not been used for some client's
	 * payment confirmation, yet.
	 * 
	 * @param token
	 *            The token to be checked.
	 * @return True if the given token is valid and false otherwise.
	 */
	public boolean isValidToken(String token);

	/**
	 * Marks the given token as valid such that isValidToken will return true
	 * for this token in future. True will be returned if the given token has
	 * not been valid before and false otherwise.
	 * 
	 * <br>
	 * <br>
	 * Note: <br>
	 * According to the definition of 'valid' in the description of this
	 * interface, exactly those tokens should be marked as valid that have been
	 * generated by the web shop but have not been used to confirm the payment
	 * of some client's order, yet.
	 * 
	 * @param token
	 *            The token to be marked as valid
	 * @return True if the given token has not been valid at the call of this
	 *         method and false otherwise.
	 */
	public boolean markTokenAsValid(String token);

	/**
	 * Marks the given token as invalid such that isValidToken will return false
	 * for this token in future. True will be returned if the given token has
	 * been valid before and false otherwise.
	 * 
	 * <br>
	 * <br>
	 * Note: <br>
	 * According to the definition of 'valid' in the description of this
	 * interface, exactly those tokens should be marked as valid that have been
	 * generated by the web shop but have not been used to confirm the payment
	 * of some client's order, yet.
	 * 
	 * @param token
	 *            The token to be marked as invalid
	 * @return True if the given token has been valid at the call of this method
	 *         and false otherwise.
	 */
	public boolean markTokenAsInvalid(String token);

	/**
	 * Maps the given IcapEvent to a positive integer smaller than 2^capacity.
	 * 
	 * @param ev
	 *            The IcapEvent that shall be mapped to an integer smaller
	 *            2^capacity.
	 * @param capacity
	 *            The capacity inducing the upper bound of 2^capacity for the
	 *            returned value.
	 * @return the hashed value
	 */
	public int hash(IcapEvent ev, int capacity);
}